% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stepwise_selection.R
\name{stepwise_selection}
\alias{stepwise_selection}
\title{Simulate dsem}
\usage{
stepwise_selection(model_options, model_shared, quiet = FALSE, ...)
}
\arguments{
\item{model_options}{character-vector containing sem elements
that could be included or dropped depending upon their
parsimony}

\item{model_shared}{character-vector containing sem elements
that must be included regardless of parsimony}

\item{quiet}{whether to avoid displaying progress to terminal}

\item{...}{arguments passed to \code{\link{dsem}},
other than \code{sem} e.g., \code{tsdata}, \code{family}
etc.}
}
\value{
An object (list) that includes:
\describe{
\item{model}{the string with the selected SEM model}
\item{record}{a list showing the AIC and whether each \code{model_options} is included or not}
}
}
\description{
Plot from a fitted \code{dsem} model
}
\details{
This function conducts stepwise (i.e., forwards and backwards) model
selection using marginal AIC, while forcing some model elements to be
included and selecting among others.
}
\examples{
data(isle_royale)
data = ts( log(isle_royale[,2:3]), start=1959)

# String including paths that must be included (not selected among)
path_shared = "
  moose -> wolves, 1, MtoW
  wolves -> moose, 1, WtoM
"
# Character-vector for paths to be selected among
path_options = c(
  "wolves -> wolves, 1, arW",
  "moose -> moose, 1, arM"
)

#' # run stepwise selection
# Using upper = 1 to prevent convergence issues which arise in this case study
# Other cases would presumably modify estimate_delta0 and control arguments
selex = stepwise_selection( 
  model_options = path_options,
  model_shared = path_shared,
  tsdata = data,
  estimate_delta0 = TRUE,
  control = dsem_control(
    getsd = FALSE,
    newton_loops = 0,
    quiet = TRUE,
    upper = 1)
)

# Show selected model
cat( selex$model )

# Fit with selected model (including SEs)
fit = dsem(
  sem = selex$model,
  tsdata = data,
  estimate_delta0 = TRUE,
  control = dsem_control(
    newton_loops = 0,
    quiet = TRUE,
    upper = 1)
)

}
